---
title: "Read and filter spatial data with R"
---

```{r setup}
#| echo: false
#| message: false
library(dplyr)
library(sf)
library(tmap)

source(here::here("R", "utils.R"))
options(tibble.print_min = 4L, tibble.print_max = 4L)
```


This example shows how to read spatial data into R using the sf package and explains the basic structure and attributes simple feature sf objects. This example uses two datasets from [Natural Earth](https://www.naturalearthdata.com/):

-   *Admin 0 -- Countries* data (from [1:10m Cultural Vectors](https://www.naturalearthdata.com/downloads/10m-cultural-vectors/))
-   *Populated Places* (from [1:50m Cultural Vectors](https://www.naturalearthdata.com/downloads/50m-cultural-vectors/))

You are required to use this same data in completing the introductory assignments on reading and mapping data [with QGIS](/assignments/02_read-data-qgis.html) and [with R](/assignments/03_read-data-r.html) so this example.

Similar introductory information is available in:

-   https://r-tmap.github.io/tmap-book/geodata.html

## Read spatial data

:::{.callout-tip collapse=false appearance='default' icon=true}
Review the sf vignette on [Reading, Writing and Converting Simple Features](https://r-spatial.github.io/sf/articles/sf2.html) for more detailed explanation on how to read spatial data into R. 
:::

Reading spatial data into your local R environment using the sf package is straight forward. For example, you can read a local GeoPackage file to an sf object by setting the dsn (short for data source name) to the file path:


```{r}
dsn <- here::here("files/data", "ne_50m_populated_places_simple.gpkg")

populated_places <- st_read(dsn = dsn)
```


`st_read` read the GeoPackage file into a simple feature (sf) object and output details on the layer, data source, driver, and attributes of the new object.

You can also use `read_sf()` which is the same as `st_read()` but it returns a tibble object and uses `quiet = TRUE` by default.


```{r}
dsn <- here::here("files/data", "ne_10m_admin_0_countries.gpkg")

countries <- read_sf(dsn = dsn)
```


The `dsn` argument can also be a URL for a spatial data file that is stored online (instead of locally on your computer) or a database endpoint. The data source is also not limited to a GeoPackage files. Supported filetypes include GeoJSON files, shapefiles, KML files, and any other file type with a [GDAL](https://gdal.org/) (Geospatial Data Abstraction Library) driver. You can review list available drivers using the `sf::st_drivers()` function.

::: panel-tabset
### Supported vector drivers


```{r}
#| echo: false
dt_drivers <- function(what) {
  dt_tbl(
    list_drivers(what),
    options = list(
      autoWidth = TRUE,
      columnDefs = list(list(width = "30px", targets = "Write support"))
    )
  )
}

dt_drivers("vector")
```


### Supported raster drivers


```{r}
#| echo: false
dt_tbl(list_drivers("raster"))
```

:::

## Structure and attributes of sf objects

:::{.callout-tip collapse=false appearance='default' icon=true}
Read the sf vignette on [Simple Features for R](https://r-spatial.github.io/sf/articles/sf1.html) for more detailed explanation of geometry types, dimensions, coordinate reference systems, and more. For more on data frames, read the [R Manual: An Introduction to R on data frames](https://rstudio.github.io/r-manuals/r-intro/Lists-and-data-frames.html#data-frames) or the chapter on [Tibbles from R for Data Science](https://r4ds.had.co.nz/tibbles.html).
:::

A simple feature (sf) object is always a data frame where each row is a feature. Like any other data frame, these columns can hold numeric (double or integer), character, factor, or logical values. These columns may also include list columns or nested data frame columns. The `dplyr::glimpse()` function provides a convenient way to get a quick overview of the column types and values for "populated_places" and "countries":


```{r}
glimpse(populated_places)

glimpse(countries)
```


:::{.callout-tip collapse=false appearance='default' icon=true}
Review the tibble vignette on [Column types](https://r-spatial.github.io/sf/articles/sf1.html) for more detailed explanation of geometry types, dimensions, coordinate reference systems, and more.
:::

A sf object can have any number of rows but it always has at least one special list column with the geometry for each feature. This column is usually named "geometry" or "geom" but it can be named anything. You can extract, rename, or replace the geometry column using the `sf::st_geometry` function.


```{r}
sf::st_geometry(countries)
```


In addition to a geometry column, sf object also four special attributes that make it different than other dataframes. These attributes are:

-   Geometry type
-   Dimensions
-   Bounding box
-   Coordinate reference system

Simple feature collections (sfc) objects share all these same attributes. Bounding box (bbox) objects have a crs attribute but none of the other attributes.

### Geometry types

You can use `sf::st_geometry_type()` to list the geometry types for any sf object. All of the features in `countries` use MULTIPOLYGON geometry. Features in `populated_places` use POINT geometry.


```{r}
st_geometry_type(countries, by_geometry = FALSE)

st_geometry_type(populated_places, by_geometry = FALSE)
```


While GeoPackage and shapefiles only support a single geometry type for each layer, sf objects do support mixed types. To show how this works, we can filter the populated places and country boundaries data to a single country then combine both objects into a single object using `dplyr::bind_rows()`.

:::{.callout-tip collapse=false appearance='default' icon=true}
Review the [Data transformation chapter](https://r-spatial.github.io/sf/articles/sf1.html) from R for Data Science for more on how to use dplyr package to filter and arrange rows, select columns, and add new variables to a data frame.
:::


```{r}
usa_name <- "United States of America"

usa_places <- filter(populated_places, adm0name == usa_name)

usa_boundaries <- filter(countries, SOVEREIGNT == usa_name)

usa <-
  bind_rows(
    usa_places,
    usa_boundaries
  )

st_geometry_type(usa, by_geometry = TRUE)
```


You can also use the `sf::st_is()` function to test if an object matches a specific geometry type. You can combine this function with `all` or `any` to check features as a whole.


```{r}
st_is(usa_boundaries, type = "MULTIPOLYGON")

any(st_is(usa_places, type = "MULTIPOLYGON"))

all(st_is(usa_places, type = "POINT"))

any(st_is(usa, type = "MULTIPOLYGON"))
```


### Dimension

sf objects must have at least two dimensions: X and Y.  *All* geometries (such as polygons or linestrings) are made up of points so two dimensions are required to locate a point within a coordinate reference system. You may also see people refer to X and Y as easting and northing or longitude and latitude. sf objects can *optionally* include a Z dimension (for altitude) or a M coordinate (for a measure associated with an individual point). The M coordinate is rarely used but can be 

M coordinate (rarely used), denoting some measure that is associated with the point, rather than with the feature as a whole (in which case it would be a feature attribute) (such as the time of measurement or measurement error of the coordinates)

If you do not need the Z dimension in your data, you can drop it using the `sf::st_zm()` function.

All geometries are composed of points. Points are coordinates in a 2-, 3- or 4-dimensional space. All points in a geometry have the same dimensionality. In addition to X and Y coordinates, there are two optional additional dimensions:

    a Z coordinate, denoting altitude
    an 

The four possible cases then are:

    two-dimensional points refer to x and y, , we refer to them as XY
    three-dimensional points as XYZ
    three-dimensional points as XYM
    four-dimensional points as XYZM (the third axis is Z, fourth M)

### Bounding box

You can get the bounding box for any sf or sfc object using `sf::st_bbox`


```{r}
usa_bbox <- st_bbox(usa)

usa_bbox
```


A bounding box is a named numeric vector with a `crs` attribute. You can convert it to a numeric vector using `as.numeric` or get the coordinate reference system with `sf::st_crs`.


```{r}
as.numeric(usa_bbox)

st_crs(usa_bbox)
```


You can convert a numeric vector back into a bounding box object with `sf::st_bbox`.


```{r}
st_bbox(
  c("xmin" = -179.14350,
    "ymin" = -14.53289,
    "xmax" = 179.78094,
    "ymax" = 71.41250)
)
```


If we want to plot the bounding box on a map, we can convert it into a sfc object with `sf::st_as_sfc()` and convert the sfc object into an sf object using `sf::st_as_sf()`.


```{r}
usa_bbox_sfc <- st_as_sfc(usa_bbox)

usa_bbox_sf <- st_as_sf(usa_bbox_sfc)
```


Finally, we can use `tmap::tmap_leaflet()` to compare the bounding box to the country boundary and places objects created in the previous section on geometry types.


```{r}
#| message: false

tmap_leaflet(
  tm_shape(usa_bbox_sf) +
    tm_borders() +
    tm_shape(usa_boundaries) +
    tm_polygons(col = "NAME", alpha = 0.2) +
    tm_shape(usa_places) +
    tm_sf(id = "name", alpha = 0.8)
)
```


### Coordinate reference systems

You can get a coordinate reference system with `sf::st_crs`. This returns a crs object which has the crs for the user input object as a character string and the well-known text (wkt) for the coordinate reference system.


```{r}
usa_crs <- st_crs(usa)

usa_crs
```


A crs object also has a method for returning the spatial reference identifier (or SRID). The SRID is a unique identifier for a specific coordinate system, tolerance, and resolution.

:::{.callout-tip collapse=false appearance='default' icon=true}
## Find coordinate reference systems
You can explore a database of over 6000 coordinate reference system with the corresponding EPSG and ESRI SRID codes at [EPSG.io](https://epsg.io/). You can also use the [crsuggest](https://github.com/walkerke/crsuggest/) package which uses data from the [EPSG Registry](https://epsg.org/home.html) (a product of the International Association of Oil & Gas Producers). The [Web Mercator projection](https://en.wikipedia.org/wiki/Web_Mercator_projection) or "EPSG:3857" is convenient option that works well for many use cases. 
:::


```{r}
st_crs(usa)$srid
```


You can change the coordinate reference system using the `sf::st_transform` function:


```{r}
usa_3857 <- st_transform(usa, 3857)

st_crs(usa_3857)
```


You can also check if a object is using a [geographic](https://en.wikipedia.org/wiki/Geographic_coordinate_system) (also known as geodetic or simply lon/lat) or [projected coordinate reference system]() using the `sf::st_is_longlat` function:


```{r}
st_is_longlat(usa)

st_is_longlat(usa_3857)
```


:::{.callout-tip collapse=false appearance='default' icon=true}
Review the sf vignette [Spherical geometry in sf using s2geometry](https://r-spatial.github.io/sf/articles/sf7.html) for a technical explanation of how sf uses the [S2 Geometry Library](https://s2geometry.io/) when manipulating data with a geographic coordinate reference system. 
:::

Both ggplot2 and tmap can convert the crs of input objects before mapping. For example, `tm_shape` supports an optional "projection" argument such as "EPSG:3035" (the [Lambert azimuthal equal-area projection](https://en.wikipedia.org/wiki/Lambert_azimuthal_equal-area_projection)):


```{r}
#| warning: false
tm_shape(countries, projection = "EPSG:3035") +
  tm_polygons("grey85", border.col = "grey30") +
  tm_layout(earth.boundary = TRUE, frame = FALSE)
```


The `ggplot2::geom_sf` function uses the coordinate reference system of the first sf object provided and re-projects additional objects to match.


```{r}
#| message: false

library(ggplot2)

countries_3857 <- st_transform(countries, 3857)

ggplot() +
  geom_sf(data = populated_places, alpha = 0.2) +
  geom_sf(data = countries_3857, fill = NA) +
  labs(title = st_crs(populated_places)$srid) +
  theme_minimal()
```


When mapping projected boundaries that include Antartica, ggplot2 and tmap both provide an unexpected result:

:::: {.columns}
::: {.column}

```{r}
#| fig.caption: "EPSG:3857 world map with tm_borders"
tm_shape(countries_3857) +
  tm_borders()
```

:::

::: {.column}

```{r}
#| fig.caption: "EPSG:3857 world map with geom_sf"
ggplot() +
  geom_sf(data = countries_3857) +
  theme_minimal()
```

:::
::::

## Filter and subset spatial data





