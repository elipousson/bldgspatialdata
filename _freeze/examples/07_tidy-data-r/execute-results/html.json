{
  "hash": "59876569768a30b0f868cdd0645462d5",
  "result": {
    "markdown": "---\ntitle: \"Tidying data in R\"\n---\n\n\nLet's start by with the question: what is tidy data?\n\n-   Each value has its own cell.\n-   Each variable has its own column.\n-   Each observation has its own row.\n\nTo get data into a tidy format, you'll need to know how to address these common problems (from [Tidy data vignette](https://tidyr.tidyverse.org/articles/tidy-data.html)):\n\n-   Column headers are values, not variable names.\n-   Multiple variables are stored in one column.\n-   Variables are stored in both rows and columns.\n-   Multiple types of observational units are stored in the same table.\n-   A single observational unit is stored in multiple tables.\n\nI've also highlighted several tips from the [The Quartz guide to bad data](https://github.com/Quartz/bad-data-guide) whenever they are relevant in this exercise.\n\n\n::: {.cell}\n\n:::\n\n\nNote: this particular example requires the [{esri2sf} package](https://github.com/elipousson/esri2sf/) (I recommend using my fork which incorporated the [{httr2} package](https://httr2.r-lib.org/)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(\"elipousson/esri2sf\") # fork of https://github.com/yonghah/esri2sf/\n```\n:::\n\n\n## Pivoting data frames between wide and long formats\n\nWe are going to look at data on [total new housing units authorized for construction](https://opendata.maryland.gov/Housing/Maryland-Total-New-Housing-Units-Authorized-For-Co/c7z9-v9mr/data) in Maryland from 2010 to 2021:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_units <-\n  readr::read_csv(\n    \"https://opendata.maryland.gov/api/views/c7z9-v9mr/rows.csv\",\n    show_col_types = FALSE\n  )\n```\n:::\n\n\nTake a look at the column names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(new_units)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Date created\"           \"Year\"                   \"MARYLAND\"              \n [4] \"Allegany County\"        \"Anne Arundel County\"    \"Baltimore City\"        \n [7] \"Baltimore County\"       \"Calvert County\"         \"Caroline County\"       \n[10] \"Carroll County\"         \"Cecil County\"           \"Charles County\"        \n[13] \"Dorchester County\"      \"Frederick County\"       \"Garrett County\"        \n[16] \"Harford County\"         \"Howard County\"          \"Kent County\"           \n[19] \"Montgomery County\"      \"Prince George's County\" \"Queen Anne's County\"   \n[22] \"Somerset County\"        \"St. Mary's County\"      \"Talbot County\"         \n[25] \"Washington County\"      \"Wicomico County\"        \"Worcester County\"      \n```\n:::\n:::\n\n\nðŸ¤” What variable is being stored in the column names?\n\nYep. Each column after \"year\" is a location.\n\nThe locations aren't all the same. They include two different scales: one column covering the whole state and the others covering a single county.\n\nFocusing on the counties, we can \"pivot\" these columns into a long format where each row has new housing units for just a single year and a single county. We do this with `tidyr::pivot_longer()` selecting the columns to pivot using the `tidyselect::contains()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_units_long <-\n  tidyr::pivot_longer(\n    data = new_units,\n    cols = contains(c(\"County\", \"city\")),\n    names_to = \"county\",\n    values_to = \"num_units\"\n  ) %>%\n  dplyr::select(-c(`Date created`, MARYLAND))\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\n**Remember to avoid [ambiguous field names](https://github.com/Quartz/bad-data-guide#field-names-are-ambiguous).** I've included the units of the value in the column name---making it clear that each number indicates the number of new housing units for that year and county.\n:::\n\nIn this example, the long format is helpful for a few reasons. First, this long format makes it easy to plot complex data with ggplot2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = new_units_long) +\n  geom_col() +\n  aes(x = Year, y = num_units, fill = county) +\n  facet_wrap(~ county) +\n  guides(fill = \"none\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](07_tidy-data-r_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\n**Are these [data too granular](https://github.com/Quartz/bad-data-guide#data-are-too-granular)?** Using counties as a grouping mean the data includes wide variation in population, size, and housing market conditions. We could consider combining counties into regions or metro area or classifying as urban or rural in order to make interpretation easier.\n:::\n\nFirst, the new location column makes it easy to join spatial data to the data frame with `dplyr::left_join()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd_counties <- tigris::counties(state = \"MD\", cb = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRetrieving data for the year 2020\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |                                                                      |   1%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |==                                                                    |   4%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |==============                                                        |  21%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  34%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |============================                                          |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |=====================================                                 |  54%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |==========================================                            |  61%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  68%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |========================================================              |  81%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nnew_units_counties <-\n  left_join(\n    x = new_units_long,\n    y = md_counties,\n    by = c(\"county\" = \"NAMELSAD\")\n  ) %>%\n  # Convert the dataframe back to sf\n  sf::st_as_sf()\n```\n:::\n\n\nDid this join work the way we expected?\n\nIf a join didn't find a match for any of the locations, any new columns will have `NA`s for the missing values. `summary()` only shows missing values for numeric values. `skimr::skim()` does show missing variables but there are a few packages that make these checks easier. {naniar} is specifically designed to work with missing data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaniar::gg_miss_var(new_units_counties)\n```\n\n::: {.cell-output-display}\n![](07_tidy-data-r_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWhoops. More than 10 unmatched rows. Which locations didn't get a match? We can filter to look for `NA` values and then use `distinct()` on the join column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_units_counties %>%\n  filter(is.na(GEOID)) %>%\n  distinct(county)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 Ã— 1\n  county        \n  <chr>         \n1 Baltimore City\n```\n:::\n:::\n\n\nOK. So the only columns that didn't match are those for Baltimore City. Let's take a look at the join column from md_counties to see what we can figure out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(new_units_long$county)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Allegany County\"        \"Anne Arundel County\"    \"Baltimore County\"      \n [4] \"Calvert County\"         \"Caroline County\"        \"Carroll County\"        \n [7] \"Cecil County\"           \"Charles County\"         \"Dorchester County\"     \n[10] \"Frederick County\"       \"Garrett County\"         \"Harford County\"        \n[13] \"Howard County\"          \"Kent County\"            \"Montgomery County\"     \n[16] \"Prince George's County\" \"Queen Anne's County\"    \"Somerset County\"       \n[19] \"St. Mary's County\"      \"Talbot County\"          \"Washington County\"     \n[22] \"Wicomico County\"        \"Worcester County\"       \"Baltimore City\"        \n```\n:::\n\n```{.r .cell-code}\nunique(md_counties$NAMELSAD)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Queen Anne's County\"    \"Wicomico County\"        \"Garrett County\"        \n [4] \"Prince George's County\" \"Caroline County\"        \"St. Mary's County\"     \n [7] \"Anne Arundel County\"    \"Calvert County\"         \"Worcester County\"      \n[10] \"Harford County\"         \"Montgomery County\"      \"Talbot County\"         \n[13] \"Dorchester County\"      \"Cecil County\"           \"Carroll County\"        \n[16] \"Washington County\"      \"Frederick County\"       \"Howard County\"         \n[19] \"Kent County\"            \"Baltimore County\"       \"Allegany County\"       \n[22] \"Somerset County\"        \"Charles County\"         \"Baltimore city\"        \n```\n:::\n:::\n\n\nðŸ¤” Do you see the problem?\n\nHint: join columns are case sensitive. \"Baltimore City\" is not the same as \"Baltimore city\".\n\nOne solution is to record the county variable using `dplyr::mutate()` and `dplyr::case_when()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_units_long <-\n  new_units_long %>%\n  mutate(\n    county = case_when(\n      county == \"Baltimore City\" ~ \"Baltimore city\",\n      TRUE ~ county\n    )\n  )\n\nnew_units_counties <-\n  left_join(\n    x = new_units_long,\n    y = md_counties,\n    by = c(\"county\" = \"NAMELSAD\")\n  ) %>%\n  # Convert the dataframe back to sf\n  sf::st_as_sf()\n```\n:::\n\n\nThe wide format can also be helpful! For example, if we pivot wider and put the years into columns it makes it easy to compare one year to another with the `mutate()` or `transmute()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_units_wide <-\n  pivot_wider(\n    # Note: if we didn't drop the geometry we would get an error\n    sf::st_drop_geometry(new_units_counties),\n    id_cols = \"county\",\n    names_from = \"Year\",\n    values_from = \"num_units\"\n  )\n\nnew_units_wide <- new_units_wide %>%\n  mutate(\n    diff_num_units_10_15 = .data[[\"2020\"]] - .data[[\"2015\"]],\n    diff_num_units_10_20 = .data[[\"2020\"]] - .data[[\"2010\"]]\n  )\n\nnew_units_wide %>% \n  mutate(\n    county = stringr::str_remove(county, \"County$\")\n  ) %>% \nggplot() +\n  geom_bar(aes(x = county, weight = diff_num_units_10_20)) +\n  coord_flip() +\n  scale_color_gradient2(low = \"red\", mid = \"white\", high = \"blue\") +\n  theme_minimal() +\n  labs(\n    title = \"Difference in permitted new housing units, 2010 and 2020\",\n    caption = \"Data: Open Baltimore/Maryland Department of Housing and Community Development\"\n  )\n```\n\n::: {.cell-output-display}\n![](07_tidy-data-r_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nOK. Your turn. The [open data on permitted multi-family units](https://opendata.maryland.gov/Housing/Maryland-New-Multi-Family-Housing-Units-Authorized/pz3y-chyn/data) is also wide---placing the data for each county in adjoining columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_multifamily_units <-\n  readr::read_csv(\n    \"https://opendata.maryland.gov/api/views/pz3y-chyn/rows.csv\",\n    show_col_types = FALSE\n  )\n```\n:::\n\n\nðŸ¤” Can you convert the data into a long format with `pivot_longer()`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_multifamily_units <-\n  pivot_longer(\n    new_multifamily_units,\n    cols = contains(c(\"County\", \"City\")),\n    names_to = \"county\",\n    values_to = \"num_units\"\n  )\n\nnew_multifamily_units\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 288 Ã— 5\n   `Date created`       Year MARYLAND county              num_units\n   <dttm>              <dbl>    <dbl> <chr>                   <dbl>\n 1 2022-10-19 00:00:00  2010     3442 Allegany County            66\n 2 2022-10-19 00:00:00  2010     3442 Anne Arundel County       847\n 3 2022-10-19 00:00:00  2010     3442 Baltimore County          635\n 4 2022-10-19 00:00:00  2010     3442 Calvert County              2\n 5 2022-10-19 00:00:00  2010     3442 Caroline County             0\n 6 2022-10-19 00:00:00  2010     3442 Carroll County              0\n 7 2022-10-19 00:00:00  2010     3442 Cecil County               68\n 8 2022-10-19 00:00:00  2010     3442 Charles County              0\n 9 2022-10-19 00:00:00  2010     3442 Dorchester County          96\n10 2022-10-19 00:00:00  2010     3442 Frederick County           95\n# â€¦ with 278 more rows\n```\n:::\n:::\n\n\n## Working with long format data\n\nNow that we have both datasets in a long format we can put the two together.\n\n\n::: {.cell}\n\n:::\n\n\nHow should we do that? One option is to use a join based the year and county name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd_housing_units_wide <-\n  left_join(\n    new_units_long,\n    new_multifamily_units_long %>%\n      rename(\n        num_multifamily_units = num_units\n      ),\n    by = c(\"Year\", \"county\")\n  )\n```\n:::\n\n\nUsing `left_join()` places the columns side-by-side in a wide format. What new variables that can we create by working with columns in this format?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# md_housing_units_wide <-\n#   md_housing_units_wide %>%\n#   mutate(\n#\n#   )\n```\n:::\n\n\nThis works for two datasets but you can also stack even more data frames into a long format. Using the `.id` parameter allows you to use the names assigned to each dataframe as a new column identifying the source of the data:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmd_housing_units_long <-\n  bind_rows(\n    \"total\" = new_units_long,\n    \"multifamily\" = new_multifamily_units_long,\n    \"singlefamily\" = new_singlefamily_units_long,\n    .id = \"type\"\n  )\n```\n:::\n\n\nIf we have year, permit type, and number of units in a \"tidy\" format, this creates new opportunities for both for visualization and for analysis using {tidyverse} packages.\n\nTo see how this works for visualization, try filtering the `md_housing_units_long` to a single county and using `geom_col()` to make a bar chart showing both the total and multifamily housing units by year for that county? I filled a few details already---you'll want to set `fill = type` and `position = \"dodge\"` (note, position is an additional parameter outside the aesthetic mapping)---but you still need to filter the data and provide the required `x` and `y` aesthetics for `geom_col()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# md_housing_units_long %>%\n#   filter() %>%\n#   ggplot() +\n#   geom_col(aes(x = , y = , fill = type), position = \"dodge\")\n```\n:::\n\n\nTo see how this works for analysis, consider how you can use `group_by()` and `summarise()` to create summary statistics by county and permit type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_multifamily_units %>% \n  group_by(county) %>% \n  summarise(\n    cum_sum_units = sum(num_units),\n    avg_units = mean(num_units),\n    min_units = min(num_units),\n    max_units = max(num_units)\n  )\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `group_by()`:\n! Must group by variables found in `.data`.\nâœ– Column `county` is not found.\n```\n:::\n:::\n\n\n### Using factors for categorical data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmd_counties_xwalk <-\n  tibble::tribble(\n                      ~county,             ~region,                                               ~msa,\n             \"Garrett County\",  \"Western Maryland\",                                                 NA,\n            \"Allegany County\",  \"Western Maryland\",                            \"Cumberland, MD-WV MSA\",\n          \"Washington County\",  \"Western Maryland\",                \"Hagerstownâ€“Martinsburg, MDâ€“WV MSA\",\n           \"Frederick County\",    \"Capital Region\", \"Washingtonâ€“Arlingtonâ€“Alexandria, DCâ€“VAâ€“MDâ€“WV MSA\",\n          \"Montgomery County\",    \"Capital Region\", \"Washingtonâ€“Arlingtonâ€“Alexandria, DCâ€“VAâ€“MDâ€“WV MSA\",\n     \"Prince George's County\",    \"Capital Region\", \"Washingtonâ€“Arlingtonâ€“Alexandria, DCâ€“VAâ€“MDâ€“WV MSA\",\n        \"Anne Arundel County\",  \"Central Maryland\",                    \"Baltimoreâ€“Columbiaâ€“Towson MSA\",\n             \"Baltimore city\",  \"Central Maryland\",                    \"Baltimoreâ€“Columbiaâ€“Towson MSA\",\n           \"Baltimore County\",  \"Central Maryland\",                    \"Baltimoreâ€“Columbiaâ€“Towson MSA\",\n             \"Carroll County\",  \"Central Maryland\",                    \"Baltimoreâ€“Columbiaâ€“Towson MSA\",\n             \"Harford County\",  \"Central Maryland\",                    \"Baltimoreâ€“Columbiaâ€“Towson MSA\",\n              \"Howard County\",  \"Central Maryland\",                    \"Baltimoreâ€“Columbiaâ€“Towson MSA\",\n             \"Calvert County\", \"Southern Maryland\", \"Washingtonâ€“Arlingtonâ€“Alexandria, DCâ€“VAâ€“MDâ€“WV MSA\",\n             \"Charles County\", \"Southern Maryland\", \"Washingtonâ€“Arlingtonâ€“Alexandria, DCâ€“VAâ€“MDâ€“WV MSA\",\n          \"St. Mary's County\", \"Southern Maryland\",                \"California-Lexington Park, MD MSA\",\n                \"Kent County\",     \"Eastern Shore\",                                                 NA,\n        \"Queen Anne's County\",     \"Eastern Shore\",                    \"Baltimoreâ€“Columbiaâ€“Towson MSA\",\n              \"Talbot County\",     \"Eastern Shore\",                                   \"Easton, MD Î¼SA\",\n            \"Caroline County\",     \"Eastern Shore\",                                                 NA,\n          \"Dorchester County\",     \"Eastern Shore\",                                    \"Cambridge, MD\",\n            \"Wicomico County\",     \"Eastern Shore\",                             \"Salisbury, MD-DE MSA\",\n            \"Somerset County\",     \"Eastern Shore\",                             \"Salisbury, MD-DE MSA\",\n           \"Worcester County\",     \"Eastern Shore\",                             \"Salisbury, MD-DE MSA\",\n               \"Cecil County\",     \"Eastern Shore\",      \"Philadelphia-Camden-Wilmington, PA-NJ-DE-MD\"\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nforcats::as_factor()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"as_factor\"): no applicable method for 'as_factor' applied to an object of class \"NULL\"\n```\n:::\n:::\n\n\n## Tidying addresses for geocoding\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultifamily_housing <-\n  readr::read_csv(\n    \"https://opendata.maryland.gov/api/views/cadm-spqd/rows.csv\",\n    name_repair = janitor::make_clean_names,\n    show_col_types = FALSE\n  )\n\nmultifamily_housing <-\n  dplyr::bind_cols(\n    multifamily_housing,\n    project_state = \"MD\"\n  )\n```\n:::\n\n\n### Using regular expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultifamily_housing_geo_osm <-\n  tidygeocoder::geocode(\n    multifamily_housing[1:50, ],\n    street = \"project_address\",\n    city = \"project_city\",\n    county = \"project_county\",\n    state = \"project_state\",\n    method = \"osm\",\n    full_results = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPassing 50 addresses to the Nominatim single address geocoder\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nQuery completed in: 50.3 seconds\n```\n:::\n:::\n\n\nDid that work? Well, when I check, I can see I am missing latitude and longitude for more than half of our addresses. ðŸ˜¬\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnaniar::gg_miss_var(multifamily_housing_geo_osm, show_pct = TRUE)\n```\n\n::: {.cell-output-display}\n![](07_tidy-data-r_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(multifamily_housing_geo_osm, is.na(long))$project_address\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"6652 Shelly Avenue\"                                        \n [2] \"8219 and 8221 Oakwood Road\"                                \n [3] \"8900 Manchester Road 8902 8904 9000 Manchester Rd\"         \n [4] \"341 E. 20th Street\"                                        \n [5] \"6349 Boston Street\"                                        \n [6] \"7667 N Maple Avenue\"                                       \n [7] \"1507 Ray Road\"                                             \n [8] \"111 Mitchell Street\"                                       \n [9] \"4300 Maple Shade Drive 4400-4412 Grape Vine Way; and 4401-\"\n[10] \"838 W. Fairmount Avenue\"                                   \n[11] \"18 W. Read Street\"                                         \n[12] \"45790  Military Lane\"                                      \n[13] \"1125 N. Patterson Park Avenue\"                             \n[14] \"301 W. Madison Street\"                                     \n[15] \"1500 W.  Fayette Street\"                                   \n[16] \"3202 Reed Street\"                                          \n[17] \"7513 Maple Avenue\"                                         \n[18] \"402 E. Second Street\"                                      \n[19] \"400 N. Athol Road\"                                         \n[20] \"1029 E. Baltimore Street\"                                  \n[21] \"93-108 Mt. Vernon Street\"                                  \n[22] \"30500 Riggin Street\"                                       \n[23] \"5511 Halpine Place\"                                        \n[24] \"4300 Cardwell Avenue\"                                      \n[25] \"1303 Greenmount Avenue\"                                    \n[26] \"4300 Frederick Avenue\"                                     \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmessy_counties <-\n  tibble::tribble(\n                  ~county,\n             \"Balt. City\",\n              \"Baltimore\",\n              \"Balt. Co.\",\n       \"BALTIMORE COUNTY\",\n               \"Bmore MD\",\n              \"Biltimore\",\n               \"Baltimor\",\n              \"Baltimore\",\n         \"Baltimore city\",\n       \"Baltimore County\",\n       \"Baltimore county\",\n    \"Anne Arundel County\",\n     \"Ann Arundel County\",\n                \"Arundel\",\n           \"Anne Arundel\"\n    )\n\nmessy_counties %>% \n  mutate(\n    address = str_replace(address, \"Shelley Road\", \"Shelley Avenue\")\n    county = case_when(\n      str_detect(county, \"Arundel|Arundle\") ~ \"Anne Arundel County\",\n      str_detect(county, \"city|City\") ~ \"Baltimore city\",\n      str_detect(county, \"Co.|County\") ~ \"Baltimore County\",\n      TRUE ~  \"Baltimore city\"\n      )\n  )\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:24:5: unexpected symbol\n23:     address = str_replace(address, \"Shelley Road\", \"Shelley Avenue\")\n24:     county\n        ^\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmultifamily_housing_geo_census <-\n  tidygeocoder::geocode(\n    multifamily_housing[1:50, ],\n    street = \"project_address\",\n    city = \"project_city\",\n    state = \"project_state\",\n    method = \"census\",\n    full_results = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPassing 50 addresses to the US Census batch geocoder\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nQuery completed in: 1.6 seconds\n```\n:::\n:::\n\n\nðŸ¤” How did that go? What approach would you use to check from missing data?\n\n\n::: {.cell}\n\n:::\n\n\n## Separating variables with `separate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneighborhoods <- sf::read_sf(\n  dsn = here::here(\"files/data/neighborhoods.geojson\")\n)\n\npermits <-\n  esri2sf::esri2sf(\n  url = \"https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/3\",\n  bbox = neighborhoods[63,]\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nâœ” Downloading \"Building Permits\" from\n  <\u001b]8;;https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/3\u0007https://egisdata.baltimorecity.gov/egis/rest/services/Housing/DHCD_Open_Baltimore_Datasets/FeatureServer/3\u001b]8;;\u0007>\nLayer type: \"Feature Layer\"\n\nGeometry type: \"esriGeometryPoint\"\n\nService CRS: \"EPSG:2248\"\n\nOutput CRS: \"EPSG:4326\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmultifamily_housing_sf <-\n  sf::st_as_sf(\n    multifamily_housing_geo,\n    coords = c(\"long\", \"lat\"),\n    crs = 4326,\n    remove = FALSE,\n    na.fail = FALSE\n  )\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in sf::st_as_sf(multifamily_housing_geo, coords = c(\"long\", \"lat\"), : object 'multifamily_housing_geo' not found\n```\n:::\n:::\n",
    "supporting": [
      "07_tidy-data-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}