{
  "hash": "bc38cec82f200241c1ac6fdfa0b59281",
  "result": {
    "markdown": "---\ntitle: \"How to use RStudio during this course\"\nexecute: \n  eval: false\n---\n\n\nIn this class, students will use the [RStudio IDE](https://posit.co/products/open-source/rstudio/) to write and excecute R code, manage projects, and interact with GitHub. This guide provides instructions on how to use RStudio to complete some common tasks.\n\n[![RStudio IDE Cheatsheet](images/Screen%20Shot%202022-11-11%20at%203.14.12%20PM.png)](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)\n\n## Setting up a new project and adding it to the course GitHub organization\n\n### Create a new project\n\nGo to File \\> New Project... and select New Project.\n\nUsing the \"New Project Wizard\" select \"New Directory\" and then select a project type. For the final project, I recommend students select \"Quarto Project\" unless we have discussed a different approach.\n\n::: {.callout-important appearance=\"simple\"}\n#### Installing Quarto\n\nIf \"Quarto Project\" is not an available option, you likely have not installed Quarto. You should quit RStudio, [download and install Quarto](https://quarto.org/docs/get-started/), then re-open RStudio and start again.\n:::\n\n![New Project Wizard in RStudio](images/Screen%20Shot%202022-11-09%20at%201.04.47%20PM.png)\n\nFill in the directory name with a short descriptive project name, e.g. \"explorebaltimorebirds\".\n\n::: {.callout-tip appearance=\"simple\"}\nMake sure to avoid using any spaces in your project name. Your project name is also going to be the name used for your project repository.\n:::\n\n![Create Quarto Project in New Project Wizard](images/Screen%20Shot%202022-11-09%20at%201.05.18%20PM.png)\n\nYour new project should open in the RStudio IDE.\n\n### Connect your new project to GitHub\n\nThe following functions can be run directly in the Console pane---you don't need to save them in an R script or document.\n\nInstall the [usethis package](https://usethis.r-lib.org/) then restart R. If you already have the use this package installed you can skip this step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\n```\n:::\n\n\nLoad the usethis package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\n```\n:::\n\n\nUse the `git_sitrep()` function to check that you have GitHub set up correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit_sitrep()\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\nIf you see any error messages, review the instructions from [Happy Git and GitHub for the useR](https://happygitwithr.com/index.html) on [getting started with Git](https://happygitwithr.com/index.html) or [connecting your GitHub account to RStudio](https://happygitwithr.com/connect-intro.html).\n:::\n\nMake your first commit to set up the project using the `use_git()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_git(message = \"Create new project\")\n```\n:::\n\n\nIf this works, the results in your console should look something like this:\n\n![](images/Screen%20Shot%202022-11-09%20at%201.09.40%20PM.png)\n\nConfirm in your console that is OK to commit the files.\n\nAdd your local Git repository to the class GitHub organization by filling in the organization parameter for `use_github()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_github(organisation = \"bldgspatialdata22\")\n```\n:::\n\n\nIf this works, the results in your console should look something like this:\n\n![](images/Screen%20Shot%202022-11-09%20at%201.10.09%20PM.png)\n\nThe repository is public by default. If you want to create a private repository which would not be visible to the public or to other students, set `private = TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_github(organisation = \"bldgspatialdata22\", private = TRUE)\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\nIf you have multiple GitHub accounts, make sure you use the *same* GitHub account that belongs to the course organization. Make sure you accepted the invitation to join the course organization. If you are not able to set up a new project, message Eli on Discord to double-check your permissions and send a new invitation to join the course repository if needed.\n:::\n\nYou can now add your project proposal and other files to the repository. Make sure to commit any changes to the repository using the Git pane within RStudio or using GitHub Desktop or another desktop application that works with GitHub.\n\n### Add a README and a license to your project\n\nAdd a README to your project. Use the `use_readme_rmd()` function to create creating a README with RMarkdown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_readme_rmd()\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\n#### Updating your README\n\nCreating a README with RMarkdown allows you to include executable code chunks in your README. You should render your README as a GitHub format Markdown file with `knitr::knit(\"README.Rmd\")` (or `devtools::build_readme()` if your project is an R package) any time you make changes.\n:::\n\nSelect a license and add it to your project using any of the license functions from usethis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_mit_license(\"Your Name Here\")\n\nuse_cc0_license()\n\nuse_gpl3_license()\n\nuse_ccby_license()\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\n#### Selecting a license\n\nThe [MIT license](https://mit-license.org/) is common license for many R packages and other open-source projects. Open data is often published using a [Creative Commons Zero](https://creativecommons.org/share-your-work/public-domain/cc0/) (CC0) or \"No Rights Reserved\" license. The [GNU General Public License](https://www.gnu.org/licenses/gpl-3.0.en.html) (GPL3), [Creative Commons Attribution](https://creativecommons.org/licenses/by/4.0/) (CC-BY) license (or [Creative Commons Attribution-ShareAlike](https://creativecommons.org/licenses/by-sa/4.0/) (CC-BY-SA) are other options you could consider.\n:::\n\n::: {.callout-important appearance=\"simple\"}\n#### Using licensed works by others\n\nIf you are using or adapting code or data from other projects, make sure you credit those projects on your README and clarify the the project repository includes material available under a different license than the license you selected for your own work. In some cases you may be required to use a specific license, such as GPL or CC-BY-SA, if you are making substantial use of an existing work published under that license.\n\nSee the [Licensing](https://r-pkgs.org/license.html) chapter from [R Packages](https://r-pkgs.org/) by Hadley Wickham, the [choosealicense.com](https://choosealicense.com/) website from GitHub, or this [guide on Considerations for licensors](https://wiki.creativecommons.org/wiki/Considerations_for_licensors_and_licensees#Considerations_for_licensors) from Creative Commons more detailed guidance on this topic.\n:::\n\n## Adding and organizing files within a project\n\n### Adding new files to your project\n\nUsing the **File \\> New File \\> ..**. menu option you can create a files including Quarto documents and presentations, RMarkdown documents, R scripts, plain Markdown files, and many others.\n\nOnce you create the file you will want to save the file within your project folder or subfolders. There are different ways of organizing an RStudio project depending on whether you are creating a website, a blog, an R package, or something different. Continue on to the next \"how to\" for more information on organizing files within a project.\n\n### Organizing files for data analysis projects\n\nThere are some common conventions that people who use R have adopted to make file organization more predictable and easy to understand. Some of these conventions are based on the requirements for creating R packages which is one approach that is used for sharing data or interactive applications.\n\nCommon folders that are also used in R packages include:\n\n-   **data:** for data used in your analysis or visualization\n-   **R:** for any R scripts used in your analysis or project.\n\nOther common folder for data analysis projects include:\n\n-   **ouput**: for PDFs, Word documents, or images files created as the result of an analysis script\n\nThe `use_r()` function is a convenient way to create an R folder and a script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_r(\"your-script-name\")\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\nReview the Ch. 4 [Efficient workflow](https://csgillespie.github.io/efficientR/workflow.html) in @gillespieEfficientProgramming2021 for a more general overview of project planning with R.\n:::\n\n### Organizing files for Quarto websites or blogs\n\n::: callout-important\nThis section of the guide is coming soon! Check out [the Quarto guide to creating a website](https://quarto.org/docs/websites/) for more information and look out for updates.\n:::\n\n## Formatting your R code and RMarkdown and Quarto documents\n\n::: {.callout-tip appearance=\"simple\"}\n#### Use the tidyverse style guide\n\n[The tidyverse style guide](https://style.tidyverse.org/) is a helpful resource for learning more about code style. The guide recommends the [styler package](https://styler.r-lib.org/) and the [lintr](https://github.com/jimhester/lintr) package for performing automated checks on code style.\n:::\n\n### Tips for formatting R scripts\n\n-   Consolidate `library()` calls at the top of your script or in a chunk labelled \"setup\" that you keep at the top of your document.\n-   Avoid including `install.packages()` or any other functions like `usethis::use_git()` in your code or code chunks. These functions are designed to be run just once for your document, script, or project---not re-run every time the script is run or the document is knit or rendered.\n-   Never include API keys or other \"secrets\" in your code. Many packages that rely on an API key to access data have functions (e.g. `tidycensus::census_api_key()` or `mapboxapi::mb_access_token()`) that let you save the key or token locally and retrieve the key from a profile file that is never part of your repository.\n-   If you have the [styler package](https://styler.r-lib.org/) installed, you can use the Addins drop-down in RStudio to run the Style active file command (or run `styler:::style_active_file()` in the Console pane) and format your code anytime you finish a work session.\n-   When writing a comment in an R script or code chunk, keep a space between the comment character and the comment, e.g. `# Correctly formatted comment` vs. `#Incorrectly formatted comment`.\n-   Code with shorter lines is easier to read and understand. When you have a function with a large number of parameters, consider putting each parameter on a separate line.\n\n### Tips for formatting RMarkdown and Quarto documents\n\n-   When you include code (like a function name or list of parameters) in the text of your document wrap the code in back ticks ``` `` ``` (in the Source view) or select Format \\> Code (in the Visual view) to apply appropriate formatting.\n-   When using comments within a code chunk or cell, focus on explaining the *why* of your code---not what results you get. Any summary or interpretation of your results should appear in the text before or after your code chunks not within the chunk itself. You can also use a table or plot function to show the output on execution.\n-   Always include a space between a heading tag and the heading text, , e.g. `## Correct Heading Formatting` vs. `##Incorrect Heading Formatting`.\n",
    "supporting": [
      "how-to-rstudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}