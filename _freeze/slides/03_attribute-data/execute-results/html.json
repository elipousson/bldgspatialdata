{
  "hash": "21c468533e86f2d1f1faeb44f601a71d",
  "result": {
    "markdown": "---\ntitle: \"Working with attributes in R (and QGIS)\"\nformat: revealjs\nexecute:\n  echo: true\n  output-location: column\n#  cache: true\n---\n\n\n# Overview\n\nBased on Ch. 3 [Attribute data operations](https://geocompr.robinlovelace.net/attr.html) from @lovelaceGeocomputation2022 we are going to look at the following:\n\n-   What is attribute data?\n\n-   How do you work with attribute data?\n\n-   How do base R and dplyr compare for this work?\n\n::: notes\n\"Becoming skilled at geographic attribute data manipulation means becoming skilled at manipulating data frames.\"\n:::\n\n## What is attribute data?\n\nAttribute data is \"*non-spatial information* associated with geographic (geometry) data.\"\n\nMost often, when we talk about attribute data we are talking about *vector* attribute data.\n\n::: notes\n@lovelaceGeocomputation2022 notes:\n\n> \"Unlike the vector data model, the raster data model stores the coordinate of the grid cell indirectly, meaning the distinction between attribute and spatial information is less clear.\"\n:::\n\n## What can you do with attribute data?\n\nYou can...\n\n-   subset or filter data\n-   aggregate or summarize data\n-   combine data sets based on shared attributes\n-   create new attributes\n\n::: notes\nYou can also do many of these same tasks using spatial operations, e.g. filtering by area instead of attribute.\n:::\n\n# Using R to work with attribute data\n\n## Loading packages\n\nFirst, you should load the {sf}, {dplyr}, and {ggplot2} packages along with data from the {spData} package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nlibrary(spData)\ndata(\"us_states\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\nThen we can take a quick look at the attributes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(us_states)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    GEOID               NAME                REGION        AREA         \n Length:49          Length:49          Norteast: 9   Min.   :   178.2  \n Class :character   Class :character   Midwest :12   1st Qu.: 93648.4  \n Mode  :character   Mode  :character   South   :17   Median :144954.4  \n                                       West    :11   Mean   :159327.3  \n                                                     3rd Qu.:213037.1  \n                                                     Max.   :687714.3  \n  total_pop_10       total_pop_15               geometry \n Min.   :  545579   Min.   :  579679   MULTIPOLYGON :49  \n 1st Qu.: 1840802   1st Qu.: 1869365   epsg:4269    : 0  \n Median : 4429940   Median : 4625253   +proj=long...: 0  \n Mean   : 6162051   Mean   : 6415823                     \n 3rd Qu.: 6561297   3rd Qu.: 6985464                     \n Max.   :36637290   Max.   :38421464                     \n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Comparing approaches to data frames\n\n| {base}          | {dplyr}                           |\n|-----------------|-----------------------------------|\n| `$`             | `pull()`                          |\n| `[`; `subset()` | `filter()`; `slice()`; `select()` |\n| `rbind()`       | `bind_rows()`                     |\n| `cbind()`       | `bind_cols()`                     |\n| `aggregate()`   | `summarize()`                     |\n\n::: notes\nYou can use base R or {dplyr}.\n\nbase R functions are more stable and (in some cases) may be faster but dplyr and other tidyverse packages offer an intuitive interface that many people prefer.\n:::\n\n------------------------------------------------------------------------\n\n## Using base R with attribute data\n\n------------------------------------------------------------------------\n\n### Subsetting by position\n\nThe base R `[` operator lets you filter rows or select columns using an integer index:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2|4,5|7,8\"}\n# get first row and all columns\nus_states[1, ]\n\n# get all rows and columns 1, 2, and 3\nus_states[, c(1:3)]\n\n# get first row and columns 1, 2, and 3\nus_states[1, c(1:3)]\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### Subsetting with a character or logical vector\n\nYou can also use character or logical vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2|4,5\"}\n# get row 20 and column \"NAME\"\nus_states[20, \"NAME\"]\n\n# get all rows where \"NAME\" equals \"Maryland\"\nus_states[us_states$NAME == \"Maryland\", ]\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### sf provides a \"sticky\" geometry column\n\nThe geometry column is \"sticky\" even when you transform the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(us_states[, 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 49\nColumns: 2\n$ GEOID    <chr> \"01\", \"04\", \"08\", \"09\", \"12\", \"13\", \"16\", \"18\", \"20\", \"22\", \"…\n$ geometry <MULTIPOLYGON [°]> MULTIPOLYGON (((-88.20006 3..., MULTIPOLYGON (((…\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n### Using comparison operators that return logical vectors\n\nUsing comparison operators to filter or subset data is a common approach to answering questions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Which U.S. states are smaller than Maryland?\nus_states[us_states$AREA < us_states[34, ]$AREA, ]\n\n# Which U.S. states are larger than Pennsylvania?\nus_states[us_states$AREA > us_states[20, ]$AREA, ]\n```\n:::\n\n\n::: notes\nFor example, using the the `$` operator, we can pull the AREA column for a single state and compare it with the `>` operator to AREA of all other states to answer\n:::\n\n------------------------------------------------------------------------\n\n### Comparison operators\n\n\n::: {.cell caption='From Geocomputation with R (CC-BY-ND)'}\n::: {.cell-output-display}\nTable: Comparison operators that return Booleans (TRUE/FALSE).\n\n|Symbol                        |Name                            |\n|:-----------------------------|:-------------------------------|\n|`==`                          |Equal to                        |\n|`!=`                          |Not equal to                    |\n|`>`, `<`                      |Greater/Less than               |\n|`>=`, `<=`                    |Greater/Less than or equal      |\n|`&`, <code>&#124;</code>, `!` |Logical operators: And, Or, Not |\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Using dplyr with attribute data\n\n------------------------------------------------------------------------\n\n### Using `filter()` or `slice()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset states for the Midwest and Northeast region\nfilter(us_states, REGION %in% c(\"Midwest\", \"Northeast\"))\n\n# Subset 5 random states\nslice_sample(us_states, n = 5)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### Using `select()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bare column names\nselect(us_states, c(NAME, REGION))\n\n# character strings with column names\nselect(us_states, c(\"NAME\", \"REGION\"))\n\n# tidyselect functions\nselect(us_states, starts_with(\"total_pop\"))\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Creating new variables\n\n------------------------------------------------------------------------\n\n### Using `<-` or `=`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert area to square miles and add as new column\nus_states$AREA <- units::set_units(us_states$AREA, \"mi^2\")\n\n# scale 2010 population into thousands\nus_states$total_pop_10_scaled <- us_states$total_pop_10 / 1000\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### Using `mutate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states <-\n  mutate(\n    .data = us_states,\n    total_pop_change_10_15 = total_pop_15 - total_pop_10,\n    .after = total_pop_15\n  )\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### Using `left_join()` or `inner_join()`\n\nExample to be added!\n\n------------------------------------------------------------------------\n\n## Chaining functions with pipes\n\nPipes (`%>%` or `|>`) help make data transformation scripts easier to read and understand:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states %>%\n  filter(REGION == \"Midwest\") %>%\n  mutate(\n    total_pop_change_10_15 = total_pop_change_10_15 / 1000\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 12 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -104.0577 ymin: 35.99568 xmax: -80.51869 ymax: 49.38436\nGeodetic CRS:  NAD83\nFirst 10 features:\n   GEOID         NAME  REGION            AREA total_pop_10 total_pop_15\n1     18      Indiana Midwest 36157.85 [mi^2]      6417398      6568645\n2     20       Kansas Midwest 82254.08 [mi^2]      2809329      2892987\n3     27    Minnesota Midwest 84388.99 [mi^2]      5241914      5419171\n4     29     Missouri Midwest 69774.95 [mi^2]      5922314      6045448\n5     38 North Dakota Midwest 70725.36 [mi^2]       659858       721640\n6     46 South Dakota Midwest 77130.41 [mi^2]       799462       843190\n7     17     Illinois Midwest 56368.25 [mi^2]     12745359     12873761\n8     19         Iowa Midwest 56271.95 [mi^2]      3016267      3093526\n9     26     Michigan Midwest 58347.38 [mi^2]      9952687      9900571\n10    31     Nebraska Midwest 77325.58 [mi^2]      1799125      1869365\n   total_pop_change_10_15                       geometry total_pop_10_scaled\n1                 151.247 MULTIPOLYGON (((-87.52404 4...            6417.398\n2                  83.658 MULTIPOLYGON (((-102.0517 4...            2809.329\n3                 177.257 MULTIPOLYGON (((-97.22904 4...            5241.914\n4                 123.134 MULTIPOLYGON (((-95.76565 4...            5922.314\n5                  61.782 MULTIPOLYGON (((-104.0487 4...             659.858\n6                  43.728 MULTIPOLYGON (((-104.0577 4...             799.462\n7                 128.402 MULTIPOLYGON (((-91.41942 4...           12745.359\n8                  77.259 MULTIPOLYGON (((-96.45326 4...            3016.267\n9                 -52.116 MULTIPOLYGON (((-85.63002 4...            9952.687\n10                 70.240 MULTIPOLYGON (((-104.0531 4...            1799.125\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Tip: Packages to use with pipes\n\n-   [{tidylog}](https://github.com/elbersb/tidylog)\n-   [{ViewPipeSteps}](https://github.com/daranzolin/ViewPipeSteps)\n\n------------------------------------------------------------------------\n\n## Intermission: Maps and charts with {ggplot2}\n\n\n::: {.cell}\n\n:::\n\n\nThe use of pipes is especially helpful with data visualizations where it reduces the need for intermediate placeholder objects or exports.\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nus_states %>%\n  filter(REGION == \"Midwest\") %>%\n  mutate(\n    total_pop_change_10_15 = total_pop_change_10_15 / 1000\n  ) %>%\n  ggplot() +\n  geom_sf(aes(fill = total_pop_change_10_15)) +\n  scale_fill_distiller(type = \"div\") +\n  labs(fill = \"2010 to 2015 pop change\\n(in thousands)\")\n```\n\n::: {.cell-output-display}\n![](03_attribute-data_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nYou can also pass functions directly to the data and aesthetic arguments for {ggplot2} geoms:\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(data = us_states %>% filter(REGION == \"Midwest\")) +\n  geom_sf(aes(fill = total_pop_change_10_15 / 1000)) +\n  scale_fill_distiller(type = \"div\") +\n  labs(fill = \"2010 to 2015 pop change\\n(in thousands)\")\n```\n\n::: {.cell-output-display}\n![](03_attribute-data_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nus_states %>%\n  arrange(desc(AREA)) %>%\n  rename(Region = REGION) %>%\n  slice_head(n = 10) %>%\n  mutate(\n    rank = row_number()\n  ) %>%\n  ggplot() +\n  geom_sf(aes(fill = Region)) +\n  geom_sf_label(aes(label = rank)) +\n  scale_fill_brewer(type = \"qual\") +\n  geom_sf(data = us_states, fill = NA) +\n  labs(title = \"10 largest states (by area) in U.S.\")\n```\n\n::: {.cell-output-display}\n![](03_attribute-data_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n::: notes\nThis example uses `arrange()` with a helper function `desc()` to sort by AREA in descending order, renames the REGION column to Region, subsets the first 10 rows with the `slice_head()` function, and add a rank label with `mutate()` and `row_number` functions. Note, that this example uses the `scale_fill_brewer()` scale function designed for discrete data (not continuous) and sets `type = \"qual\"` because region is a qualitative value with no ranking.\n:::\n\n------------------------------------------------------------------------\n\n## Additional topics\n\n-   using SQL queries to filter data\n-   {stringr} package and using regex\n-   using `case_when()` for recoding variables\n-   using `pivot_longer()` to pull variables from column names\n-   date and time variables\n\n## Recap on attribute data with R\n\n-   base R and dplyr both support many of the same tasks\n-   use pipes to chain together actions\n\n------------------------------------------------------------------------\n\n# References\n",
    "supporting": [
      "03_attribute-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}