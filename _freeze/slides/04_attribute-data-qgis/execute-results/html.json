{
  "hash": "f2bf5204eda2eb2e9c6f64013991852f",
  "result": {
    "markdown": "---\ntitle: \"Working with attributes in R (and QGIS)\"\nformat: revealjs\nexecute:\n  echo: true\n  output-location: column\n#  cache: true\n---\n\n\nThese slides are not formatted and mainly consist of notes in their current form.\n\n# Using QGIS to work with attribute data\n\n## **September 14 - QGIS notes**\n\nWhere do people encouter expressions?\n\n-   Field calculator: Change the value of an existing or new field based on an expression\n\n    -   Interface includes:\n\n        -   Expression editor\n\n        -   Expression search/reference\n\n        -   Help reference pane\n\n        -   Preview/validation\n\n    -   Features\n\n        -   Autocompletion\n\n        -   Validation in preview section\n\n        -   Check boxes to create\n\n            -   a new field (equivalent to dplyr::mutate())\n\n            -   virtual field\n\n        -   Custom expression language modelled on SQL; most similar PostGIS\n\n        -   Functional language; Expression must be a single command of chained functions\n\n        -   Different types of values, but it is not strict about it, e.g. '4' + 6 (more forgiving than R)\n\n    -   Watch out!\n\n        -   Trap: character literals must be wrapped in single quotes; double-quotes are reserved for field references\n\n        -   Trap: NULL values return NULL, e.g. 5 + NULL is NULL\n\n    -   Tips!\n\n        -   `||` is concatenate\n\n        -   Number fields are evaluated as expressions\n\n        -   `@` references variables (variable are context dependent, e.g. scale)\n\n        -   Context-dependent variables have informative prefixes (e.g. `map_...` ) and only appear in widgets where they are available. Variable scopes include:\n\n            -   global\n\n            -   project (can override global variables)\n\n            -   map\n\n            -   layout or layout item\n\nExpressions are first built for Field calculator but also appear as:\n\n-   Expression dialogue for custom labels\n\n-   Select by expression (very common use)\n\n-   Layer feature styling\n\n-   Tips on using expression builder with Layout\n\n    -   Enclose expressions in `[%` and `%]` to evaluate\n\nThings to demonstrate\n\n-   View \\> New map view\n\n-   Use symbol_color variable to match label color to symbol color\n\n## **September 21 - QGIS Notes**\n\n<https://www.youtube.com/watch?v=a0cVLzbEOig>\n\n## **Stats Summary panel**\n\n-   Starts with layer selection\n\n-   Nice for interactive exploration\n\n-   Option to limit stats to selected features\n\n-   Allows use of expressions in calculating stats\n\nKind of nice but\\... don't use it\n\n-   Old school GIS technique\n\n-   Ad hoc data analysis and not reproducible\n\nInstead\\...\n\n**Use processing toolbox**\n\n-   Basic processing algorthims\n\n    -   Buffer\n\n    -   Centroid\n\n    -   Basic stats for fields\n\n    -   etc.\n\n-   Advanced/esoteric techniques\n\nFor exploratory analysis\n\n-   Processing\n\n    -   Basic stats for fields\n    -   Stats by category\n\n-   Notes\n\n    -   Not quite as interactive\n\n    -   Generates an HTML report\n\n    -   End up with a bunch of files (HTML and spatial data) in folder w/ no way to keep track of it\n\n**But still\\... don't do that either.**\n\nInstead use:\n\n-   Processing modeler to create a graphical analysis\n\n    -   Allows someone else (including future you) to see analysis process\n\n    -   Option to save models inside a project\n\n    -   Models will appear within processing toolbox whenever you open the project file\n\n-   Data-defined layer styling\n\n    -   See equivalent to mapview w/ zcol\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# test code\nlibrary(dplyr)\n```\n:::\n",
    "supporting": [
      "04_attribute-data-qgis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}